// Run 'gradle checkUpdates' to find out which dependencies have newer versions
plugins {
    id 'com.github.sherter.google-java-format' version '0.9' apply false
    id 'net.ltgt.errorprone' version '2.0.1' apply false
    id 'org.cadixdev.licenser' version '0.6.0'
    id 'name.remal.check-updates' version '1.3.1' apply false
    id 'com.palantir.git-version' version '0.12.2' apply false
    id 'de.marcphilipp.nexus-publish' version '0.4.0' apply false
}

// v0.20.0-2-g000a42a -> 0.20.0-2-g000a42a
ext.getTag = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(1)
}

// 0.20.0-2-g000a42a -> 0.20.0-SNAPSHOT
// 0.20.0 -> 0.20.0
// Used to name jar files
ext.getVersionName = { ->
    def split = getTag().split('-')
    if (split.size() > 1) {
        return split[0] + '-SNAPSHOT'
    }
    return split[0]
}

// 0.20.0-SNAPSHOT -> 0.20.0
// 0.20.0 -> 0.20.0
// Stored int version.properties which is loaded
// and used as a value of temporal-client-version gRPC header.
ext.getClientVersionName = { ->
    def split = getVersionName().split('-')
    return split[0]
}


// Logs list of failed tests after build is done.
subprojects {
    apply plugin: "com.palantir.git-version"
    group = 'io.temporal'
    version = getVersionName()

    repositories {
        mavenCentral()
    }

    apply plugin: 'java-library'
    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        withJavadocJar()
        withSourcesJar()
    }

    apply plugin: "name.remal.check-updates"

    apply plugin: 'com.github.sherter.google-java-format'

    googleJavaFormat {
        toolVersion '1.7'
        include '**/*.java'
        exclude '**/generated/*'
        exclude '**/.idea/**'
    }

    apply plugin: 'net.ltgt.errorprone'
    dependencies {
        errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')
        errorprone('com.google.errorprone:error_prone_core:2.7.1')
    }

    compileJava {
        dependsOn 'googleJavaFormat'
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
        options.errorprone.excludedPaths = '.*/generated-sources/.*'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
        options.errorprone.excludedPaths = '.*/generated-sources/.*'
    }

    apply plugin: 'org.cadixdev.licenser'
    license {
        header rootProject.file('license-header.txt')
        exclude '**/*.puml'
    }
    tasks.check.dependsOn('checkLicenseMain')

    javadoc {
        options.encoding = 'UTF-8'
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    // add a collection to track failedTests
    ext.failedTests = []

    test {
        testLogging {
            events 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
            // Uncomment the following line if you want to see test logs in gradlew run.
            showStandardStreams true
        }
        forkEvery = 1
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        afterTest { TestDescriptor descriptor, TestResult result ->
            if (result.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
                failedTests << ["${descriptor.className}::${descriptor.name}"]
            }
        }
    }
    // print out tracked failed tests when the build has finished
    gradle.buildFinished {
        if (!failedTests.empty) {
            println "Failed tests for ${project.name}:"
            failedTests.each { failedTest ->
                println failedTest
            }
            println ""
        }
    }

    apply plugin: 'maven-publish'
    apply plugin: 'de.marcphilipp.nexus-publish'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

            }
        }

        // Uncomment to test local publishing and comment nexusPublishing
//        repositories {
//            maven {
//                def releasesRepoUrl = "$System.env.HOME/repos/releases"
//                def snapshotsRepoUrl = "$System.env.HOME/repos/snapshots"
//                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//            }
//        }
    }

    nexusPublishing {
        repositories {
            sonatype {
                username = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : ''
                password = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : ''
            }
        }
    }

    if (project.hasProperty('signing.keyId')) {
        apply plugin: 'signing'
        signing {
            sign publishing.publications.mavenJava
        }
    }

    //customize the pom in afterEvaluate to allow subproject build.gradle files to
    //contribute the description field
    afterEvaluate { subproject ->
        subproject.publishing.publications.mavenJava {
            pom {
                name = subproject.description
                description = subproject.description
                url = 'https://github.com/temporalio/temporal-java-sdk'

                scm {
                    connection = 'scm:git@github.com:temporalio/temporal-java-sdk.git'
                    developerConnection = 'scm:git@github.com:temporalio/temporal-java-sdk.git'
                    url = 'https://github.com/temporalio/temporal-java-sdk.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'mfateev'
                        name = 'Maxim Fateev'
                        email = 'maxim@temporal.io'
                    }
                    developer {
                        id = 'samarabbas'
                        name = 'Samar Abbas'
                        email = 'samar@temporal.io'
                    }
                }
            }
        }
    }
}
//logging.captureStandardOutput LogLevel.INFO


task clean {
    subprojects.each {
        it.afterEvaluate {
            def cleanTask = it.tasks.findByName('clean')
            if (cleanTask) {
                dependsOn(cleanTask)
            }
        }
    }
}
