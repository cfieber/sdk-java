plugins {
    id 'com.github.sherter.google-java-format' version '0.9' apply false
    id 'net.ltgt.errorprone' version '2.0.1' apply false
    id 'org.cadixdev.licenser' version '0.6.0'
}

// v0.20.0-2-g000a42a -> 0.20.0-2-g000a42a
ext.getTag = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim().substring(1)
}

// 0.20.0-2-g000a42a -> 0.20.0-SNAPSHOT
// 0.20.0 -> 0.20.0
// Used to name jar files
ext.getVersionName = { ->
    def split = getTag().split('-')
    if (split.size() > 1) {
        return split[0] + '-SNAPSHOT'
    }
    return split[0]
}

// 0.20.0-SNAPSHOT -> 0.20.0
// 0.20.0 -> 0.20.0
// Stored int version.properties which is loaded
// and used as a value of temporal-client-version gRPC header.
ext.getClientVersionName = { ->
    def split = getVersionName().split('-')
    return split[0]
}


// Logs list of failed tests after build is done.
subprojects {
    group = 'io.temporal'
    version = getVersionName()

    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
        mavenCentral()
    }

    apply plugin: 'java-library'
    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
        withJavadocJar()
        withSourcesJar()
    }
    apply plugin: 'com.github.sherter.google-java-format'

    googleJavaFormat {
        toolVersion '1.7'
        include '**/*.java'
        exclude '**/generated/*'
        exclude '**/.idea/**'
    }

    apply plugin: 'net.ltgt.errorprone'
    dependencies {
        errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')
        errorprone('com.google.errorprone:error_prone_core:2.7.1')
    }

    compileJava {
        dependsOn 'googleJavaFormat'
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
        options.errorprone.excludedPaths = '.*/generated-sources/.*'
    }

    compileTestJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
        options.errorprone.excludedPaths = '.*/generated-sources/.*'
    }

    apply plugin: 'org.cadixdev.licenser'
    license {
        header rootProject.file('license-header.txt')
        exclude '**/*.puml'
    }
    tasks.check.dependsOn('checkLicenseMain')

    javadoc {
        options.encoding = 'UTF-8'
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    // add a collection to track failedTests
    ext.failedTests = []

    test {
        testLogging {
            events 'passed', 'skipped', 'failed'
            exceptionFormat 'full'
            // Uncomment the following line if you want to see test logs in gradlew run.
            showStandardStreams true
        }
        forkEvery = 1
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        afterTest { TestDescriptor descriptor, TestResult result ->
            if (result.resultType == org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE) {
                failedTests << ["${descriptor.className}::${descriptor.name}"]
            }
        }
    }

    // print out tracked failed tests when the build has finished
    gradle.buildFinished {
        if (!failedTests.empty) {
            println "Failed tests for ${project.name}:"
            failedTests.each { failedTest ->
                println failedTest
            }
            println ""
        }
    }
}
//logging.captureStandardOutput LogLevel.INFO


task clean {
    subprojects.each {
        it.afterEvaluate {
            def cleanTask = it.tasks.findByName('clean')
            if (cleanTask) {
                dependsOn(cleanTask)
            }
        }
    }
}
